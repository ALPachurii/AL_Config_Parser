import json
from src.main.Ships import *
from src.main.MetaShips import *
from src.main.Utility import *
from src.main.NationList import getNationList
import typing


class ConfigParser:
    """
    ConfigParser is a decoder/parser that reads serialized game file (generated by 'AL Serializer') and stores them
    It has methods to construct easily usable objects using those game files
    """

    def __init__(self, path: str):
        """
        The constructor of ConfigParser, takes a string and generates a parser object

        :param path: the path to "sharecfg" folder, must be absolute path
        """

        def loadConfig(configName: str):
            configFile = open(path + configName)
            config = json.load(configFile)
            config.pop('all')
            configFile.close()
            return config

        self.shipStatisticDict = loadConfig("ship_data_statistics")
        self.shipDataDict = loadConfig("ship_data_template")
        self.attrDict = loadConfig("attribute_info_by_type")
        self.fleetTechDict = loadConfig("fleet_tech_ship_template")

    def getShip(self, shipID: int) -> Ship:
        """
        Creates a Ship object of the ship that has ID "shipID".
        It will either be a SurfaceShip or a Submarine

        :param shipID: the ID of that ship
        :return: SurfaceShip object or Submarine object depending on it's stat
        """
        ID = str(shipID)
        if self.shipStatisticDict[ID]["oxy_max"] == 0:
            return SurfaceShip(self.shipStatisticDict[ID], self.shipDataDict[ID], self.fleetTechDict[ID[slice(0, -1)]])
        else:
            return Submarine(self.shipStatisticDict[ID], self.shipDataDict[ID], self.fleetTechDict[ID[slice(0, -1)]])

    def getMetaShip(self, metaShipID: int) -> MetaShip:
        ID = str(metaShipID)
        maxLimitBreakID = ID + "4"
        if self.shipStatisticDict[maxLimitBreakID]["oxy_max"] == 0:
            return MetaSurfaceShip(self.shipStatisticDict[maxLimitBreakID], self.shipDataDict[maxLimitBreakID],
                                   self.fleetTechDict[ID])
        else:
            return MetaSubmarine(self.shipStatisticDict[maxLimitBreakID], self.shipDataDict[maxLimitBreakID],
                                 self.fleetTechDict[ID])

    def getWeapon(self, wepID: int) -> dict:
        pass

    def getSkill(self, skillID: int) -> dict:
        pass

    def getSkillExp(self, skillLevel: int) -> dict:
        pass

    def getAttrDict(self) -> dict:
        """
        This method generates an ship attribute info dict

        :return: An ship attribute info dict which maps attribute ID to it's name (for example FP)
        """
        return {int(ID): x['name'] for ID, x in self.attrDict.items()}

    def getAttrName(self, attrID: int) -> str:
        """
        This method returns an attribute's name based on its ID

        :param attrID: the ID of the attribute, range from 1 to 9
        :return: attribute's name
        """
        return self.getAttrDict()[attrID]

    @staticmethod
    def getNation(nationID: int) -> str:
        """
        static method. Returns nation name
        :param nationID: the id of that nation
        :return: nation name
        """
        nationList = getNationList()
        return nationList[nationID]

    def getShipList(self) -> list:
        """
        generates ship id list, automatically filters non-collectable ships
        :return: list of all collectable ship ids
        """
        return [int(ID) for ID, _ in self.shipStatisticDict.items() if not isFiltered(int(ID))]

    def getShipIdToName(self) -> dict:
        """
        generates a map from shipID to ship's English name
        :return: a dict, keys are ship id (int), values are ship name (string)
        """
        return {ID: (self.shipStatisticDict[str(ID)]['name']
                     + (" BB" if isKagaBB(ID) else "") + " "
                     + "(" + self.shipStatisticDict[str(ID)]['english_name'] + ")") for ID in self.getShipList()}

    def getShipNameToId(self) -> dict:
        """
        generates a map from ship's English name to a list of its ship IDs
        :return: a dict, keys are ship name (string), values are a list of ship id (int)
        """
        nameToId = {name: [] for ID, name in self.getShipIdToName().items()}
        for ID, name in self.getShipIdToName().items():
            nameToId[name].append(ID)
        return nameToId

    def getMetaShipList(self) -> typing.Set[int]:
        """
        generates meta ship ID list, automatically filters NPC ships
        :return: list of meta ship id
        """
        shipList = self.getShipList()
        return set(map(getMetaID, shipList))

    def getMetaIdToName(self) -> dict:
        return {getMetaID(ID): name for ID, name in self.getShipIdToName().items()}

    def getMetaNameToId(self) -> dict:
        return {name: MetaID for MetaID, name in self.getMetaIdToName().items()}
